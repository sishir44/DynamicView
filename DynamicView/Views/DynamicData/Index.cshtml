@model DynamicView.Models.DynamicDataModel

@{
    ViewData["Title"] = Model.ReportName ?? "Dynamic Report";
}

@{
    var fixedColumns = Model.FieldNames.Where(field => Model.isFixedCol.Contains(field)).ToList();
    var remainingColumns = Model.FieldNames.Where(field => !Model.isFixedCol.Contains(field)).ToList();
    var orderedColumns = fixedColumns.Concat(remainingColumns).ToList();
    var isFixedColPresent = fixedColumns.Any(); // Check if fixed columns exist
    var rowIndex = 0; // Track the row index for alternating colors


}

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@Model.ReportName</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet" />
    <link rel="stylesheet" href="~/css/styles.css" asp-append-version="true" />
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css" rel="stylesheet">

    <script src="~/js/script.js" asp-append-version="true"></script>
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

    <style>
        /* Style for fixed/sticky columns */
        .fixed-column {
            position: sticky !important;
            background-color: black !important;
            color: white !important;
            border-right: 1px solid white;
            left: 0px;
            z-index: 10;
        }

        .odd-row {
            background-color: @Model.AlternateRowColor !important;
        }

    </style>

    <script>
        $(document).ready(function () {
        $(".selectorinput").on("keyup", function () {
        let columnId = $(this).attr("data-column");
        let input = $(this).val().toLowerCase();

        let $dropdown = $("#dropdown_" + columnId);
        if ($dropdown.length) {
        $dropdown.find("option").each(function () {
        $(this).toggle($(this).text().toLowerCase().includes(input));
        });
        }
        });
        // $("#dataTable tbody tr").each(function () {
        //     let $row = $(this);
        //     let $td = $row.find(`[data-column='${columnId}']`);
        //     let isGrandTotal = $row.attr("id") === "grandTotalRow";

        //     if (isGrandTotal) {
        //         $row.show();
        //     } else if ($td.length) {
        //         let textValue = $td.text().toLowerCase();
        //         $row.toggle(textValue.includes(input));
        //     }
        // });

        // Handle clicking an option in the dropdown to filter data
        $(".filter-dropdown").on("click", "option", function () {
        let columnId = $(this).closest(".filter-dropdown").attr("data-column");
        let selectedValue = $(this).val().toLowerCase();

        // Filter the table based on the selected dropdown option
        $("#dataTable tbody tr").each(function () {
        let $row = $(this);
        let $td = $row.find(`[data-column='${columnId}']`);
        let isGrandTotal = $row.attr("id") === "grandTotalRow";

        if (isGrandTotal) {
        $row.show();
        } else if ($td.length) {
        let textValue = $td.text().toLowerCase();
        if (selectedValue === "" || textValue.includes(selectedValue)) {
        $row.show();
        } else {
        $row.hide();
        }
        }
        });

        // Disable the filter dropdowns to the left of the selected column
        let columnIndex = $(".filter-dropdown").index($(this).closest(".filter-dropdown"));
        $(".filter-dropdown").each(function (index) {
        if (index < columnIndex) {
        $(this).prop("disabled", true).find('.optionfilter').css('background-color', '#7b7c7f');
        } else {
        $(this).prop("disabled", false);
        }
        });
        });
        });

    </script>

    <script>
        $(document).ready(function () {
        $("#selectedDate").on("change", function () {

        let selectedDate = $(this).val();

        if (!selectedDate) {
        console.warn("No date selected.");
        return;
        }

        if ($("#dataTable").length === 0) {
        alert("Records are not available.");
        return;
        }

        let rowsFound = false;
        $("#dataTable tbody tr").each(function () {
        let $row = $(this);

        let timeStamp = $row.find("[data-column='TimeStamp']").text().trim();
        let dateKey = $row.find("[data-column='DateKey']").text().trim();
        let formattedTimeStampDate = "";
        let formattedDateKeyDate = "";

        if (timeStamp && timeStamp !== '--') {
        let datePart = timeStamp.split(" ")[0];
        formattedTimeStampDate = datePart.replace(/(\d{2})-(\d{2})-(\d{4})/, "$3-$2-$1");
        }

        if (dateKey && dateKey !== '--') {
        formattedDateKeyDate = dateKey.replace(/(\d{4})(\d{2})(\d{2})/, "$1-$2-$3");
        }

        if (formattedTimeStampDate === selectedDate || formattedDateKeyDate === selectedDate) {
        $row.show();
        rowsFound = true;
        } else {
        $row.hide();
        }

        if ((!formattedTimeStampDate || formattedTimeStampDate === '--') && (!formattedDateKeyDate || formattedDateKeyDate === '--')) {
        $row.hide();
        }
        });

        if (!rowsFound) {
        alert("No records available for the selected date.");
        //refresh();
        }
        });
        });
    </script>

    <script>
        document.addEventListener("DOMContentLoaded", function () {
        var colorCode = '@Model.Color';
        var elements = document.getElementsByClassName('non-fixed-column');

        for (var i = 0; i < elements.length; i++) {
        elements[i].style.setProperty('background-color', colorCode, 'important');
        }
        });
    </script>

</head>
<body class="body-scrollbar">

    <!-- Data Table -->
    <div class="table-container">
        <table id="dataTable" class="table table-striped">
            <thead class="table-dark">
                <tr class="firstRowAlphabet">
                    @foreach (var column in Model.firstRowColumn)
                    {
                        <th>@column</th>
                    }
                </tr>
                <tr>
                    @foreach (var field in orderedColumns)
                    {
                        var isFixed = fixedColumns.Contains(field); // Check if the column is fixed
                        var className = isFixed ? "fixed-column" : "non-fixed-column";
                        <th class="@className">@field</th>
                    }
                </tr>
            </thead>
            <tbody>
                @foreach (var row in Model.TotalSum)
                {
                    <tr id="grandTotalRow">
                        @foreach (var field in orderedColumns.Select((column, index) => new { column, index }))
                        {
                            bool isPercentColumn = Model.isPercentorRatio != null && Model.isPercentorRatio.ContainsKey(field.column) && Model.isPercentorRatio[field.column] == true;
                            <td data-column="@field.column">
                                @if (row.ContainsKey(field.column))
                                {
                                    var value = row[field.column];

                                    if (Model.NoOfDecimal.ContainsKey(field.column))
                                    {
                                        var decimalPlaces = Model.NoOfDecimal[field.column];

                                        if (value is string strValue && decimal.TryParse(strValue, out decimal decimalValue))
                                        {
                                            @decimalValue.ToString("F" + decimalPlaces)
                                        }
                                        else if (value is decimal || value is float || value is double)
                                        {
                                            if (isPercentColumn)
                                            {
                                                @((Convert.ToDecimal(row[field.column]) * 100).ToString("F" + decimalPlaces) + " %")
                                            }
                                            else
                                            {
                                                @((Convert.ToDecimal(value)).ToString("F" + decimalPlaces))
                                            }
                                        }
                                        else
                                        {
                                            @value
                                        }
                                    }
                                    else if (value is decimal || value is float || value is double)
                                    {
                                        if (isPercentColumn)
                                        {
                                            @((Convert.ToDecimal(row[field.column]) * 100).ToString("F" + 1) + " %")
                                        }
                                        else
                                        {
                                            //@((Convert.ToDecimal(value)).ToString("F" + decimalPlaces))
                                            @Convert.ToInt32(value).ToString()
                                        }
                                    }
                                    else
                                    {
                                        @value
                                    }
                                }
                                else if (field.index == 3)
                                {
                                    @("Grand Total")
                                }
                                else
                                {
                                    @("--")
                                }
                            </td>
                        }

                    </tr>
                }
                @if (Model.TotalMMM != null)
                {
                    @for (int i = 0; i < Model.TotalMMM.Count; i++)
                    {
                        <tr style="background-color:#063B73; color:white">
                            @foreach (var field in orderedColumns.Select((column, index) => new { column, index }))
                            {
                                bool isPercentColumn = Model.isPercentorRatio != null && Model.isPercentorRatio.ContainsKey(field.column) && Model.isPercentorRatio[field.column] == true;
                                <td data-column="@field.column">
                                    @if (Model.TotalMMM[i].ContainsKey(field.column))
                                    {
                                        var value = Model.TotalMMM[i][field.column];
                                        if (Model.NoOfDecimal.ContainsKey(field.column))
                                        {
                                            var decimalPlaces = Model.NoOfDecimal[field.column];

                                            if (value is string strValue && decimal.TryParse(strValue, out decimal decimalValue))
                                            {
                                                @decimalValue.ToString("F" + decimalPlaces)
                                            }
                                            else if (value is decimal || value is float || value is double)
                                            {
                                                if (isPercentColumn)
                                                {
                                                    @((Convert.ToDecimal(value) * 100).ToString("F" + decimalPlaces) + " %")
                                                }
                                                else
                                                {
                                                    @((Convert.ToDecimal(value)).ToString("F" + decimalPlaces))
                                                }
                                            }
                                            else
                                            {
                                                @value
                                            }
                                        }
                                        else if (value is decimal || value is float || value is double)
                                        {
                                            if (isPercentColumn)
                                            {
                                                @((Convert.ToDecimal(value) * 100).ToString("F" + 1) + " %")
                                            }
                                            else
                                            {
                                                @Convert.ToInt32(value).ToString()
                                            }
                                        }
                                        else
                                        {
                                            @value
                                        }
                                    }
                                    else if (field.index == 0)
                                    {
                                        @("MMM Total")
                                    }
                                    else
                                    {
                                        @("")
                                    }
                                </td>
                            }
                        </tr>

                        @for (int j = 0; j < Model.TotalTM.Count; j++)
                        {
                            <tr style="background-color: #87d1fa; color:white">
                                @foreach (var field in orderedColumns.Select((column, index) => new { column, index }))
                                {
                                    bool isPercentColumn = Model.isPercentorRatio != null && Model.isPercentorRatio.ContainsKey(field.column) && Model.isPercentorRatio[field.column] == true;
                                    <td data-column="@field.column">
                                        @if (Model.TotalTM[j].ContainsKey(field.column))
                                        {
                                            var value = Model.TotalTM[j][field.column];
                                            if (Model.NoOfDecimal.ContainsKey(field.column))
                                            {
                                                var decimalPlaces = Model.NoOfDecimal[field.column];

                                                if (value is string strValue && decimal.TryParse(strValue, out decimal decimalValue))
                                                {
                                                    @decimalValue.ToString("F" + decimalPlaces)
                                                }
                                                else if (value is decimal || value is float || value is double)
                                                {
                                                    if (isPercentColumn)
                                                    {
                                                        @((Convert.ToDecimal(value) * 100).ToString("F" + decimalPlaces) + " %")
                                                    }
                                                    else
                                                    {
                                                        @((Convert.ToDecimal(value)).ToString("F" + decimalPlaces))
                                                    }
                                                }
                                                else
                                                {
                                                    @value
                                                }
                                            }
                                            else if (value is decimal || value is float || value is double)
                                            {
                                                if (isPercentColumn)
                                                {
                                                    @((Convert.ToDecimal(value) * 100).ToString("F" + 1) + " %")
                                                }
                                                else
                                                {
                                                    @Convert.ToInt32(value).ToString()
                                                }
                                            }
                                            else
                                            {
                                                @value
                                            }
                                        }
                                        else if (field.index == 0)
                                        {
                                            @("TM Total")
                                        }
                                        else
                                        {
                                            @(" ")
                                        }
                                    </td>
                                }
                            </tr>

                            <!-- Loop through TableData and display the related data, matching TM and MMM values -->
                            foreach (var row in Model.TableData.Where(r => r.ContainsKey("TM") && !string.IsNullOrEmpty(r["TM"]?.ToString()) && r.ContainsKey("MUL_MktMngr") && !string.IsNullOrEmpty(r["MUL_MktMngr"]?.ToString()) &&
                            r["TM"].ToString() == Model.TotalTM[j]["TM"]?.ToString() && r["MUL_MktMngr"].ToString() == Model.TotalMMM[i]["MUL_MktMngr"]?.ToString()))
                            {
                                @* <tr class="@((rowIndex % 2 == 0) ? "even-row" : "odd-row")">
                                    @foreach (var field in orderedColumns)
                                    {
                                        <td data-column="@field">
                                            @if (row.ContainsKey(field))
                                            {
                                                var value = row[field];

                                                if (Model.NoOfDecimal.ContainsKey(field) && (Model.ColorAliasName.Contains(field)))
                                                {
                                                    var decimalPlaces = Model.NoOfDecimal[field];

                                                    if (value is string strValue && decimal.TryParse(strValue, out decimal decimalValue))
                                                    {
                                                        @decimalValue.ToString("F" + decimalPlaces)
                                                    }
                                                    else if (value is decimal || value is float || value is double)
                                                    {
                                                        @if (Model.ColorAliasName.Contains(field))
                                                        {
                                                            //decimal formattedValue = Convert.ToDecimal(value) * 100;
                                                            string formattedValue = (Convert.ToDecimal(value) * 100).ToString("F" + decimalPlaces);
                                                            decimal formattedDecimalValue = Convert.ToDecimal(formattedValue);

                                                            var backgroundColor = "transparent";

                                                            if (formattedDecimalValue < (decimal)Model.ColorValue1)
                                                            {
                                                                backgroundColor = Model.ColorCode1;
                                                            }
                                                            else if (formattedDecimalValue >= (decimal)Model.ColorValue1 && (formattedDecimalValue < (decimal)Model.ColorValue2))
                                                            {
                                                                backgroundColor = Model.ColorCode2;
                                                            }
                                                            else if (formattedDecimalValue >= (decimal)Model.ColorValue2 && (formattedDecimalValue < (decimal)Model.ColorValue3))
                                                            {
                                                                backgroundColor = Model.ColorCode3;
                                                            }
                                                            //@formattedValue.ToString("F" + decimalPlaces)
                                                            <div style="background-color: @backgroundColor; height:fit-content;">
                                                                @($"{formattedValue} %")
                                                            </div>
                                                        }
                                                        else
                                                        {
                                                            @((Convert.ToDecimal(value) * 100).ToString("F" + decimalPlaces) + " %")
                                                        }
                                                    }
                                                    else
                                                    {
                                                        @value
                                                    }
                                                }
                                                else if (Model.ColorAliasName.Contains(field))
                                                {
                                                    //decimal formattedValue = Convert.ToInt32(value) * 10;
                                                    string formattedValue = (Convert.ToDecimal(value) * 100).ToString("F" + 1);
                                                    decimal formattedDecimalValue = Convert.ToDecimal(formattedValue);

                                                    var backgroundColor = "transparent";

                                                    if (formattedDecimalValue < (decimal)Model.ColorValue1)
                                                    {
                                                        backgroundColor = Model.ColorCode1;
                                                    }
                                                    else if (formattedDecimalValue >= (decimal)Model.ColorValue1 && (formattedDecimalValue < (decimal)Model.ColorValue2))
                                                    {
                                                        backgroundColor = Model.ColorCode2;
                                                    }
                                                    else if (formattedDecimalValue >= (decimal)Model.ColorValue2 && (formattedDecimalValue < (decimal)Model.ColorValue3))
                                                    {
                                                        backgroundColor = Model.ColorCode3;
                                                    }
                                                    //@formattedValue.ToString("F" + decimalPlaces)
                                                    <div style="background-color: @backgroundColor; height:fit-content;">
                                                        @($"{formattedValue} %")
                                                    </div>
                                                }
                                                else if (value is decimal || value is float || value is double)
                                                {
                                                    if (Convert.ToDecimal(value) < 1 && Convert.ToDecimal(value) > 0)
                                                    {
                                                        @((Convert.ToDecimal(value) * 100).ToString("F" + 1) + " %")
                                                    }
                                                    else
                                                    { 
                                                        @Convert.ToInt32(value).ToString()
                                                    }

                                                }
                                                else
                                                {
                                                    @value
                                                }
                                            }
                                            else
                                            {
                                                @(" ")
                                            }
                                        </td>
                                    }
                                </tr> *@

                                <tr class="@((rowIndex % 2 == 0) ? "even-row" : "odd-row")">
                                    @foreach (var field in orderedColumns)
                                    {
                                        var backgroundColor = "transparent"; // Default background color
                                        var formattedValue = ""; // Default value display
                                        decimal formattedDecimalValue;

                                        if (row.ContainsKey(field))
                                        {
                                            var value = row[field];

                                            bool isPercentColumn = Model.isPercentorRatio != null && Model.isPercentorRatio.ContainsKey(field) && Model.isPercentorRatio[field] == true;

                                            if (Model.NoOfDecimal.ContainsKey(field) && Model.ColorAliasName.Contains(field))
                                            {
                                                var decimalPlaces = Model.NoOfDecimal[field];
                                                decimal decimalVal = Convert.ToDecimal(value);


                                                if (value is string strValue && decimal.TryParse(strValue, out decimal decimalValue))
                                                {
                                                    formattedValue = decimalValue.ToString("F" + decimalPlaces);
                                                }
                                                else if (value is decimal || value is float || value is double)
                                                {
                                                    if (isPercentColumn)
                                                    {
                                                        formattedDecimalValue = decimalVal * 100;
                                                        formattedValue = formattedDecimalValue.ToString("F" + decimalPlaces) + " %";
                                                    }
                                                    else
                                                    {
                                                        formattedDecimalValue = decimalVal;
                                                        formattedValue = formattedDecimalValue.ToString("F" + decimalPlaces);
                                                    }

                                                    // Determine background color based on value
                                                    if (formattedDecimalValue < (decimal)Model.ColorValue1)
                                                    {
                                                        backgroundColor = Model.ColorCode1;
                                                    }
                                                    else if (formattedDecimalValue >= (decimal)Model.ColorValue1 && formattedDecimalValue < (decimal)Model.ColorValue2)
                                                    {
                                                        backgroundColor = Model.ColorCode2;
                                                    }
                                                    else if (formattedDecimalValue >= (decimal)Model.ColorValue2 && formattedDecimalValue < (decimal)Model.ColorValue3)
                                                    {
                                                        backgroundColor = Model.ColorCode3;
                                                    }
                                                }
                                                else
                                                {
                                                    formattedValue = value.ToString();
                                                }
                                            }
                                            else if (Model.ColorAliasName.Contains(field))
                                            {
                                                if (isPercentColumn)
                                                {
                                                    formattedDecimalValue = (decimal)value * 100;
                                                    formattedValue = formattedDecimalValue.ToString("F" + 1) + " %";
                                                }
                                                else
                                                {
                                                    formattedDecimalValue = (decimal)value;
                                                    formattedValue = formattedDecimalValue.ToString("F" + 1);
                                                }
                                                // Determine background color
                                                if (formattedDecimalValue < (decimal)Model.ColorValue1)
                                                {
                                                    backgroundColor = Model.ColorCode1;
                                                }
                                                else if (formattedDecimalValue >= (decimal)Model.ColorValue1 && formattedDecimalValue < (decimal)Model.ColorValue2)
                                                {
                                                    backgroundColor = Model.ColorCode2;
                                                }
                                                else if (formattedDecimalValue >= (decimal)Model.ColorValue2 && formattedDecimalValue < (decimal)Model.ColorValue3)
                                                {
                                                    backgroundColor = Model.ColorCode3;
                                                }
                                            }
                                            else if (value is decimal || value is float || value is double)
                                            {
                                                if (isPercentColumn)
                                                {
                                                    formattedValue = (Convert.ToDecimal(value) * 100).ToString("F1") + " %";
                                                }
                                                else
                                                {
                                                    formattedValue = Convert.ToInt32(value).ToString();
                                                }
                                            }
                                            else
                                            {
                                                formattedValue = value.ToString();
                                            }
                                        }
                                        else
                                        {
                                            formattedValue = " ";
                                        }

                                        // Apply the background color directly to <td>
                                        <td data-column="@field" style="background-color: @backgroundColor;">
                                            @formattedValue
                                        </td>
                                    }
                                </tr>

                                rowIndex++;
                            }
                        }
                    }
                }
                else
                {
                    @foreach (var row in Model.TableData)
                    {
                        <tr class="@((rowIndex % 2 == 0) ? "even-row" : "odd-row")">
                            @foreach (var field in orderedColumns)
                            {
                                <td data-column="@field">
                                    @if (row.ContainsKey(field))
                                    {
                                        var value = row[field];

                                        if (Model.NoOfDecimal.ContainsKey(field))
                                        {
                                            var decimalPlaces = Model.NoOfDecimal[field];

                                            if (value is string strValue && decimal.TryParse(strValue, out decimal decimalValue))
                                            {
                                                @decimalValue.ToString("F" + decimalPlaces)
                                            }
                                            else if (value is decimal || value is float || value is double)
                                            {
                                                @((Convert.ToDecimal(value)).ToString("F" + decimalPlaces))
                                            }
                                            else
                                            {
                                                @value
                                            }
                                        }
                                        else
                                        {
                                            @value
                                        }
                                    }
                                    else
                                    {
                                        @(" ")
                                    }
                                </td>
                            }
                        </tr>
                        rowIndex++;
                    }
                }
            </tbody>
        </table>
    </div>


    <script>
        document.addEventListener("DOMContentLoaded", function () {

            /* Reload the page when View Change Begin */
            let lastViewportWidth = sessionStorage.getItem('lastViewportWidth');
            let currentWidth = window.innerWidth;

            function checkAndReload() {
                let newWidth = window.innerWidth;
                if (lastViewportWidth !== newWidth) {
                    sessionStorage.setItem('lastViewportWidth', newWidth);
                    location.reload();
                }
            }
            if (!lastViewportWidth) {
                sessionStorage.setItem('lastViewportWidth', currentWidth);
            }
            window.addEventListener('resize', function () {
                checkAndReload();
            });
            /* Reload the page when View Change End */

            /* Dynamic fixed column handle Begin */
            // Get fixed columns from Razor model
            var fixedColumns = @Html.Raw(System.Text.Json.JsonSerializer.Serialize(Model.isFixedCol));
            if (fixedColumns.length > 0) {
                let leftPosition = 0;
                let zIndex = 10;

                // Find column indexes dynamically
                let headers = document.querySelectorAll("thead tr:nth-child(2) th");
                let columnIndexMap = {};

                headers.forEach((th, index) => {
                    let columnName = th.textContent.trim();
                    if (fixedColumns.includes(columnName)) {
                        columnIndexMap[columnName] = index + 1;
                    }
                });

                // Apply sticky styles to fixed columns
                Object.keys(columnIndexMap).forEach((colName) => {
                    let index = columnIndexMap[colName];

                    // Calculate the actual width of the column
                    let firstCell = document.querySelector(`th:nth-child(${index})`);
                    let columnWidth = firstCell ? firstCell.offsetWidth : 100;

                    document.querySelectorAll(`th:nth-child(${index}), td:nth-child(${index})`).forEach((cell) => {
                        cell.classList.add("fixed-column");
                        cell.style.left = `${leftPosition}px`;
                        cell.style.zIndex = zIndex;
                        cell.style.minWidth = `${columnWidth}px`;
                        cell.style.maxWidth = `${columnWidth}px`;
                    });

                    // Increment leftPosition based on actual column width
                    leftPosition += columnWidth;
                    zIndex++;
                });
            }
            /* Dynamic fixed column handle End */
        });

    </script>




</body>
</html>
