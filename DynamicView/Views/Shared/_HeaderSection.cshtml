@model DynamicView.Models.DynamicDataModel

@{
    float count1 = 0, count2 = 0, count3 = 0; // Initialize counts
    var fixedColumns = Model.FieldNames.Where(field => Model.isFixedCol.Contains(field)).ToList();
    var remainingColumns = Model.FieldNames.Where(field => !Model.isFixedCol.Contains(field)).ToList();
    var orderedColumns = fixedColumns.Concat(remainingColumns).ToList();

    @if (Model.ColorAliasName != null)
    {
        @foreach (var col in Model.ColorAliasName) // Loop through required columns
        {
            <!-- Display column name -->
            @foreach (var row in Model.TableData) // Loop through each row to get column values
            {
                if (row.ContainsKey(col)) // Check if column exists in the row
                {
                    var data = row[col]; // Get column data

                    if (row[col] != null && float.TryParse(row[col].ToString(), out float dataValue))
                    {
                        if (dataValue < Model.ColorValue1)
                        {
                            count1 += 1;
                        }
                        else if (dataValue >= Model.ColorValue1 && dataValue < Model.ColorValue2)
                        {
                            count2 += 1;
                        }
                        else if (dataValue >= Model.ColorValue2)
                        {
                            count3 += 1;
                        }
                    }

                }
            }
        }
    }
}

<style>
  
    .maindivshow {
        display: flex;
        flex-wrap: nowrap; /* Prevents wrapping into a new row */
        justify-content: flex-start; /* Aligns items properly */
        gap: normal; /* Space between sub-columns */
        max-width: 100%; /* Ensures it doesn't break to the next line */
        white-space:nowrap;
    }

    .sub-column {
        display: flex;
        flex-direction: column;
        gap: 5px;
        border: 1px solid black hidden;
        padding: 10px;
        min-width: auto; /* Adjust width as needed */
        align-items: center;
        background-color: white;
        border-radius: 1px;
    }


    .collabel {
        font-size: 9px;
        font-weight: bold;
        /* text-align: center; */
        margin-bottom: 5px;
        white-space: nowrap; /* Prevents text wrapping */
        word-break: normal; /* Ensures long words wrap */
        overflow-wrap: break-word; /* Alternative way to break long words */
        max-width: 100%; /* Adjust width as needed */
        display: block; /* Ensures it works properly */
        text-overflow: ellipsis; /* Optional: Adds '...' if text is too long */
        overflow: hidden; /* Optional: Hides overflowing text if it exceeds max-width */
    }

    .maindivshow input.showcardinput {
        font-size: 10px;
        height: 24px;
        min-width:60px;
        max-width:auto;
        border-radius: 6px;
        text-align: center;
        background-color: lightblue;
        border: 1px solid #ccc;
    }

    .w-100 {
        flex-basis: 100%;
        height: 0;
    }


    .filterClass {
        background-color: white !important;
        margin-left: 1px;
        margin-right: -1px;
        overflow-x: auto;
        width:auto;
    }

    /* New scrollable container */
    .scrollHeader {
        width: 100%;
        overflow-x: auto;
        white-space:normal;
        padding-bottom: 10px;
    }

    /* Prevent columns from wrapping to the next line */
    .table-row {
        display: flex;
        flex-wrap: nowrap;
    }

    /* Ensure each column has enough space */
    .RptCol, .text-center, .filterBox {
        min-width: 100px; /* Adjust width as per requirement */
    }

    /* Optional: Style scrollbar */
    .scrollHeader::-webkit-scrollbar {
        height: 8px;
    }

    .scrollHeader::-webkit-scrollbar-thumb {
        background: blue;
        border-radius: 4px;
    }

    .scrollHeader::-webkit-scrollbar-track {
        background: #f1f1f1;
    }
</style>

<header>
    <nav class="navbar navbar-expand-sm navbar-toggleable-sm" style="color: black; background-color:@Model.Color;">
        <div class="container-fluid">
            <h2 id="reportHeader">@Model.ReportName</h2>
            <!-- Add ms-auto to push the items to the right -->
            <div class="d-flex ms-auto align-items-center col-md-2">
                <input type="date" id="selectedDate" name="selectedDate" class="form-control" title="Select Date">
                <button type="submit" class="btn btn-sm ms-2 small-btn refBtn" title="First Load Data" onclick="refresh()">
                    <i class="fas fa-retweet"></i>
                </button>
            </div>
        </div>
    </nav>

    <div class="row filterClass mt-1">
        <div class="table-container scrollHeader"> <!-- New wrapper div -->
            <div class="table-row"> <!-- Inner div for horizontal scrolling -->

                <!-- Color Count Box -->
                @if (Model.ColorAliasName != null)
                {
                    <div class="col-lg-1 col-md-1 col-sm-6 col-xs-12 RptCol">
                        <div class="maindiv">
                            <label>Total</label>
                            <input type="button" name="GAGoals" id="storeCountDisplay" class="form-control" value="@Model.TableData.Count">

                            <label>@Model.ColorValue2 &amp; Above</label>
                            <input type="button" name=">100" id="tbeCountDisplay" class="form-control" value="@count3" style="background-color: @Model.ColorCode3;">
                        </div>
                    </div>
                    <div class="col-lg-1 col-md-1 col-sm-6 col-xs-12 RptCol">
                        <div class="maindiv">
                            <label>Less Than @Model.ColorValue2</label>
                            <input type="button" name="GAGoals" id="storeCountDisplay1" class="form-control" value="@count2" style="background-color: @Model.ColorCode2;">

                            <label>Less Than @Model.ColorValue1</label>
                            <input type="button" name=">100" id="tbeCountDisplay1" class="form-control" value="@count1" style="background-color: @Model.ColorCode1;">
                        </div>
                    </div>
                }

                <!-- ShowCard Box -->
                @if (Model.ShowCard != null)
                {
                    var columnsToShow = Model.ShowCard.Keys.ToList();
                    int totalColumns = columnsToShow.Count;

                    <div class="col-lg-auto col-md-auto col-sm-6 col-xs-12 text-center" style="width: auto;">
                        <div class="maindivshow d-flex">
                            @for (int i = 0; i < totalColumns; i += 2) // Process two items per sub-column
                            {
                                <div class="sub-column">
                                    <!-- Sub-column wrapper -->
                                    <label class="collabel">@columnsToShow[i]</label>
                                    @if (Model.GrandTotalSum != null)
                                    {
                                        bool isPercentColumn = Model.isPercent != null && Model.isPercent.ContainsKey(@columnsToShow[i]) && Model.isPercent[@columnsToShow[i]] == true;
                                        @foreach (var row in Model.GrandTotalSum)
                                        {
                                            if (row.ContainsKey(columnsToShow[i]))
                                            {
                                                var value = @row[columnsToShow[i]];

                                                if (Model.NoOfDecimal.ContainsKey(columnsToShow[i]))
                                                {
                                                    var decimalPlaces = Model.NoOfDecimal[columnsToShow[i]];
                                                    if (value is string strValue && decimal.TryParse(strValue, out decimal decimalValue))
                                                    {
                                                        <input type="button" class="showcardinput" value="@decimalValue.ToString("F" + decimalPlaces)" readonly />
                                                    }
                                                    else if (value is decimal || value is float || value is double)
                                                    {
                                                        if (isPercentColumn)
                                                        {
                                                            <input type="button" class="showcardinput" value="@((Convert.ToDecimal(row[columnsToShow[i]])).ToString("F" + decimalPlaces) + " %")" readonly />
                                                        }
                                                        else
                                                        {
                                                            <input type="button" class="showcardinput" value="@((Convert.ToDecimal(value)).ToString("F" + decimalPlaces))" readonly />
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <input type="button" class="showcardinput" value="@row[columnsToShow[i]]" readonly />
                                                    }
                                                }
                                                else if (value is decimal || value is float || value is double)
                                                {
                                                    if (isPercentColumn)
                                                    {
                                                        <input type="button" class="showcardinput" value="@((Convert.ToDecimal(row[columnsToShow[i]])).ToString("F" + 1) + " %")" readonly />
                                                    }
                                                    else
                                                    {
                                                        <input type="button" class="showcardinput" value="@Convert.ToInt32(value).ToString()" readonly />
                                                    }
                                                }
                                                else
                                                {
                                                    <input type="button" class="showcardinput" value="@row[columnsToShow[i]]" readonly />
                                                }
                                                // <input type="button" class="showcardinput" value="@row[columnsToShow[i]]" readonly />
                                            }
                                        }
                                    }
                                    
                                    @if (i + 1 < totalColumns) // Check if second row exists
                                    {
                                        <label class="collabel">@columnsToShow[i + 1]</label>
                                        @if (Model.GrandTotalSum != null)
                                        {
                                            bool isPercentColumn = Model.isPercent != null && Model.isPercent.ContainsKey(@columnsToShow[i + 1]) && Model.isPercent[@columnsToShow[i + 1]] == true;
                                            @foreach (var row in Model.GrandTotalSum)
                                            {
                                                if (row.ContainsKey(columnsToShow[i + 1]))
                                                {
                                                    var value = @row[columnsToShow[i + 1]];

                                                    if (Model.NoOfDecimal.ContainsKey(columnsToShow[i + 1]))
                                                    {
                                                        var decimalPlaces = Model.NoOfDecimal[columnsToShow[i + 1]];
                                                        if (value is string strValue && decimal.TryParse(strValue, out decimal decimalValue))
                                                        {
                                                            <input type="button" class="showcardinput" value="@decimalValue.ToString("F" + decimalPlaces)" readonly />
                                                        }
                                                        else if (value is decimal || value is float || value is double)
                                                        {
                                                            if (isPercentColumn)
                                                            {
                                                                <input type="button" class="showcardinput" value="@((Convert.ToDecimal(row[columnsToShow[i+1]])).ToString("F" + decimalPlaces) + " %")" readonly />
                                                            }
                                                            else
                                                            {
                                                                <input type="button" class="showcardinput" value="@((Convert.ToDecimal(value)).ToString("F" + decimalPlaces))" readonly />
                                                            }
                                                        }
                                                        else
                                                        {
                                                            <input type="button" class="showcardinput" value="@row[columnsToShow[i+1]]" readonly />
                                                        }
                                                    }
                                                    else if (value is decimal || value is float || value is double)
                                                    {
                                                        if (isPercentColumn)
                                                        {
                                                            <input type="button" class="showcardinput" value="@((Convert.ToDecimal(row[columnsToShow[i+1]])).ToString("F" + 1) + " %")" readonly />
                                                        }
                                                        else
                                                        {
                                                            <input type="button" class="showcardinput" value="@Convert.ToInt32(value).ToString()" readonly />
                                                        }
                                                    }
                                                    else
                                                    {
                                                        <input type="button" class="showcardinput" value="@row[columnsToShow[i+1]]" readonly />
                                                    }
                                                    // <input type="button" class="showcardinput" value="@row[columnsToShow[i + 1]]" readonly />
                                                }
                                            }
                                        }
                                    }
                                </div>
                            }
                        </div>
                    </div>
                }


                <!-- Filter Box -->
                @if (Model.isFilterCol != null)
                {
                    @foreach (var column in Model.isFilterCol as List<string>)
                    {
                        var columnId = column.Replace(" ", ""); // Remove spaces to create valid IDs
                        <div class="col-sm-2 filterBox mx-1">
                            <input type="text"
                                name="textSearch@columnId"
                                id="textSearch@columnId"
                                class="selectorinput form-control"
                                placeholder="Search @column"
                                data-column="@columnId" />

                                <select class="form-control filter-dropdown mt-1" id="dropdown_@columnId" size="5" data-column="@columnId">
                                    @foreach (var value in Model.TableData
                                    .Where(data => data.ContainsKey(column))
                                    .Select(data => data[column]?.ToString())
                                    .Distinct())
                                    {
                                        <option class="optionfilter" style="background-color: @Model.Color;" value="@value" title="@value">@value</option>
                                    }
                                </select>
                        </div>
                    }
                }

            </div> 
        </div> 
    </div>


    @* Mobile Dropdown *@
    <div class="container dropdownSearchBar">
        <div class="filter-section row g-3 mt-0 filterSearchBar">
            <div class="col-md-6">
                <select id="filterColumn" class="form-select">
                    <option value="">-- Select Column --</option>
                    @foreach (var column in Model.isFilterCol)
                    {
                        <option value="@column">@column</option>
                    }
                </select>
            </div>
            <div class="col-md-6">
                <input type="text" id="textSearchTable" class="form-control" placeholder="Search..." onkeyup="TableDataFilter()">
            </div>
        </div>
    </div>
</header>